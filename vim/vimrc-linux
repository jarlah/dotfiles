" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
set encoding=utf-8

" ================ Vundle ===========================
" Turn off filetype to ensure Vundle executes properly
filetype off

" Set the runtime path to include Vundle and it's init
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" core plugin (required)
Plugin 'gmarik/Vundle.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'kien/ctrlp.vim'
"Plugin 'altercation/vim-colors-solarized'

" main plugins
Plugin 'sjl/gundo.vim'
Plugin 'bling/vim-airline'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'vim-scripts/tComment'
Plugin 'tpope/vim-surround'
Plugin 'rking/ag.vim'
"Bundle 'edsono/vim-matchit'
Plugin  'henrik/vim-indexed-search'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-repeat'
Plugin 'jiangmiao/auto-pairs'
"Bundle 'xolox/vim-session'
"Bundle 'xolox/vim-misc'
"Bundle 'editorconfig/editorconfig-vim'
Plugin 'godlygeek/tabular'
Plugin 'airblade/vim-gitgutter'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'rhysd/clever-f.vim'

" git plugins
Plugin 'tpope/vim-fugitive'

" rust plugins
Plugin 'wting/rust.vim'
Plugin 'phildawes/racer'

" python plugins
Plugin 'nvie/vim-flake8'

" autocompletion
"Bundle 'Valloric/YouCompleteMe'

" markdown plugins
Plugin 'plasticboy/vim-markdown'

" enable all plugins
call vundle#end()
filetype plugin indent on

" ================ General Config ====================
set expandtab                   " Use spaces not tabs
set tabstop=4                   " Use 4 spaces
set shiftwidth=4                " Use 4 spaces for indents
set smarttab
set autoindent                  " Indent if preivous line is indented
set title                       " Show the title in the vim title bar
"set number                      " Line numbers are good
set relativenumber              " Show relative line numbers
set ruler                       " Show cursor position in status instead of full line numbers
set backspace=indent,eol,start  " Allow backspace in insert mode over autoindent, line breaks, and start of insert action
set history=1000                " Store lots of :cmdline history (default is 20)
set showcmd                     " Show incomplete cmds down the bottom
set showmode                    " Show current mode down the bottom
"set gcr=a:blinkon0              " Disable cursor blink
set visualbell                  " No sounds
set autoread                    " Reload files changed outside vim
set mouse=a                     " Enable mouse usage
set ls=2                        " Show status bar with file path and name
set confirm                     " Instead of failing cmd from no save, ask to save
set wildmenu                    " Better command line completion
set wildmode=list:longest       " Only complete up to the point of ambiguity (i.e. like a shell)
set scrolloff=3                 " Show lines of context around the cursor when scrolling
set nowrap                      " Don't wrap lines
" set linebreak                 " Wrap lines at convenient points
set ttyfast                     " Smoother changes
set cursorline                  " Highlight current line
set shell=/usr/bin/zsh          " Use zsh as the shell
set completeopt -=preview
set noshowmode                  " Don't show current mode

" Set a highlighted column to give reference for long lines
set colorcolumn=99

" Buffers can exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" Catch trailing whitespace when desired (<leader>s)
set listchars=tab:>-,trail:Â·,eol:$
nmap <silent> <leader>s :set nolist!<CR>

" Store temp files in specific loctions
set backupdir=~/.vim-tmp,~/.tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,/tmp

" persist (g)undo tree between sessions
set undofile
set history=100
set undolevels=100

" consistent menu navigation
inoremap <C-j> <C-n>
inoremap <C-k> <C-p>

" togglables without FN keys
nnoremap <leader>1 :GundoToggle<CR>
set pastetoggle=<leader>2
nnoremap <leader>3 :TlistToggle<CR>
nnoremap <leader>4 :TagbarToggle<CR>
nnoremap <leader>5 :NERDTreeToggle<CR>

" ctrlP config
let g:ctrlp_map = "<c-p>"
nnoremap <leader>t :CtrlPMRU<CR>
nnoremap <leader>bp :CtrlPBuffer<CR>
" clever-f prompt
let g:clever_f_show_prompt = 1
let g:clever_f_across_no_line = 1

" =============== Search Settings ===================
set hlsearch                    " Highlight searches (Use <C-L> to temporarily disable)
set incsearch                   " highlight incrementally as they are typed
set ignorecase                  " Ignore case when searching
set smartcase                   " Except when using capital letters
" Remap <C-L> (redraw screen) to disable search highlight until next search
"nnoremap <C-L> :nohl<CR><C-L>

" ============== Copy / Paste ========================
set pastetoggle=<F10>            " Toggle between paste/nopaste with <F10>
"set paste                       " Turn on paste mode always

" Alias the unnamed clipboard to the Linux X11 clipboard
set clipboard=unnamedplus

" Yank text to the system clipboard in Linux
"noremap <leader>y "*y
"noremap <leader>yy "*Y

" make C-a, C-x work properly
set nrformats=

" Make Y act like D and C, i.e. yank till EOL rather than yy
map Y y$

" ============= syntax highlighting / display ================
syntax on
set background=dark
" If terminal doesn't support solarized color palettes
"let g:solarized_termcolors=256
" Allow transperant backgrounds
" let g:solarized_termtrans = 1
"let g:solarized_visibility = "high"
" Must come last
colorscheme solarized

" Change cursor based on mode (Gnome Terminal)
if has("autocmd")
  au InsertEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape ibeam"
  au InsertLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape block"
  au VimLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape ibeam"
endif

" ============= session management ===================
let g:session_directory = "~/.vim/session"
let g:session_autoload = "no"
let g:session_autosave = "no"
let g:session_command_aliases = 1
nnoremap <leader>so :OpenSession
nnoremap <leader>ss :SaveSession
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

" Make sure Vim returns to the same line when you reopen a file.
augroup line_return
au!
au BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\ execute 'normal! g`"zvzz' |
\ endif
augroup END

" ============== Pathogen Initialization =============
" This loads all the plugins in ~/.vim/bundle
" using ~/.vim/autoload/pathogen.vim
" NOT//NOT compatible with Vundle!
"execute pathogen#infect()

" ============== Omnicomplete Support ===============
" This adds the autocomplete function
"set omnifunc=syntaxcomplete#Complete

" ================ Folds ============================
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 3 levels
set nofoldenable        "dont fold by default

" Remap the leader key to something more convienient
let mapleader = ","

" =============== Mapping =========================
" Enable faster viewport scrolling
nnoremap <C-e> 4<C-e>
nnoremap <C-y> 4<C-y>

" Working with Splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" =========== Gundo ============
nnoremap <F5> :GundoToggle<CR>

" ========== Airline ============
set laststatus=2                " Always show statusbar
if !exists("g:airline_symbols")
  let g:airline_symbols = {}
endif
let g:airline_theme="powerlineish"
let g:airline_powerline_fonts=1
" let g:airline_section_warning = airline#section#create([ "syntastic" ])
let g:airline#extensions#branch#empty_message = "No SCM"
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#fnamecollapse = 1 " /a/m/model.rb
let g:airline#extensions#hunks#non_zero_only = 1 " git gutter

" =============== Go ================================
" These settings are for Go-lang specific features
" autocmd FileType go autocmd BufWritePre <buffer> Fmt	" gofmt code on save
" autocmd FileType go compiler go     " Always enable compiler plugin

" ================ Rust ============================
" These settings are for Rust-lang specific features
" and Racer auto-complete
let g:racer_cmd = "~/.bin/racer"
let $RUST_SRC_PATH="/usr/local/src/rust/src"

" =============== Python ===========================
" These settings are for Python and Flake8 settings
autocmd FileType python nnoremap <silent> <leader>8 :call Flake8()<CR>
"autocmd FileType python map <buffer> <F8> :call Flake8()<CR>

